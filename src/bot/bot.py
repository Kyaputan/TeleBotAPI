import logging
import os
import json
from datetime import datetime
import telebot
import glob

import config
from Lang.pipeline import process_image_pipeline, synthesize_all_summaries, llm_weather

logger = logging.getLogger(__name__)

if not config.TELEGRAM_BOT_TOKEN:
    raise RuntimeError("Please set TELEGRAM_BOT_TOKEN in environment or .env")
bot = telebot.TeleBot(config.TELEGRAM_BOT_TOKEN, parse_mode="HTML")




def _load_all_summaries():
    if not os.path.exists(config.SUMMARY_LOG):
        return []
    with open(config.SUMMARY_LOG, "r", encoding="utf-8") as f:
        return [json.loads(line) for line in f if line.strip()]

# ------------ config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ------------
EXCLUDED_COMMANDS = ["/start", "/help", "/summary", "/clear" ,"/cls" ,"/sum" ,"/weather"]

USAGE_TEXT = (
    "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
    "‚Ä¢ /start ‚Äî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó\n"
    "‚Ä¢ /help ‚Äî ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
    "‚Ä¢ /summary ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•\n"
    "‚Ä¢ /clear ‚Äî ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•\n\n"
    "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏™‡πà‡∏á ‚Äò‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‚Äô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üì∑"
)

WELCOME_TEXT = (
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ü§ñ‚ú®\n"
    "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏ô‡∏π‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ LLM ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞\n\n"
    f"{USAGE_TEXT}"
)

#* ------------ /start ------------
@bot.message_handler(commands=["start"])
def handle_start(m):
    logger.info("Start command received", extra={"user_id": m.from_user.id})
    bot.reply_to(m, WELCOME_TEXT)

#* ------------ /help ------------
@bot.message_handler(commands=["help"])
def handle_help(m):
    logger.info("Help command received", extra={"user_id": m.from_user.id})
    bot.reply_to(m, USAGE_TEXT)

#* ------------ /summary ------------
@bot.message_handler(commands=["summary" , "sum"])
def handle_summary(m):
    logger.info("Summary command received")
    try:
        bot.send_message(m.chat.id, "<b>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</b>")
        summaries = _load_all_summaries()
        logger.info("Summaries requested", extra={"count": len(summaries)})
        combined = synthesize_all_summaries(summaries)
        bot.send_message(m.chat.id, f"<b>‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</b>\n{combined}")
    except Exception as e:
        bot.reply_to(m, f"‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: <code>{e}</code> ‡∏Ñ‡πà‡∏∞")

#* ------------ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á) ------------
@bot.message_handler(func=lambda msg: bool(getattr(msg, "text", None)) and msg.text.strip() not in EXCLUDED_COMMANDS)
def handle_free_text(m):
    logger.info("Free text received", extra={"user_id": m.from_user.id, "text": m.text})
    try:
        bot.send_message(
            m.chat.id,
            "‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô /summary /clear ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á ‚Äò‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‚Äô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏∞\n\n"
            f"{USAGE_TEXT}"
        )
    except Exception as e:
        bot.reply_to(m, f"‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: <code>{e}</code> ‡∏Ñ‡πà‡∏∞")
        

#* ------------ /clear ------------
@bot.message_handler(commands=["clear", "cls"])
def handle_clear(m):
    logger.info("Clear command received")
    try:
        bot.send_message(m.chat.id, "<b>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå...</b>")

        # 1) ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô uploads ‡πÅ‡∏•‡∏∞ processed
        for path in glob.glob("uploads/*"):
            try:
                os.remove(path)
            except Exception as e:
                logger.warning("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", extra={"file": path, "error": str(e)})

        for path in glob.glob("processed/*"):
            try:
                os.remove(path)
            except Exception as e:
                logger.warning("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", extra={"file": path, "error": str(e)})

        # 2) ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå log summaries
        if os.path.exists(config.SUMMARY_LOG):
            with open(config.SUMMARY_LOG, "w", encoding="utf-8") as f:
                f.write("")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤

        bot.send_message(m.chat.id, "<b>‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ ‚úÖ</b>")

    except Exception as e:
        bot.reply_to(m, f"‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: <code>{e}</code> ‡∏Ñ‡πà‡∏∞")

#* ------------ photo ------------
@bot.message_handler(content_types=["photo"])
def handle_photo(m):
    logger.info("Photo received")
    try:
        photo = m.photo[-1]
        file_info = bot.get_file(photo.file_id)
        file_bytes = bot.download_file(file_info.file_path)

        ts = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
        in_path = os.path.join(config.UPLOAD_DIR, f"{m.chat.id}_{m.message_id}_{ts}.jpg")
        with open(in_path, "wb") as f:
            f.write(file_bytes)
        bot.reply_to(m,
        "‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡πà‡∏∞ ‡∏´‡∏ô‡∏π‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ"
    )

        summary, out_path = process_image_pipeline(in_path)

        caption = (
            "<b>‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</b>\n"
            f"{summary}\n\n"
            "<b>‡πÑ‡∏ü‡∏•‡πå</b>: <code>" + os.path.basename(out_path) + "</code>"
        )
        with open(out_path, "rb") as f:
            bot.send_photo(m.chat.id, f, caption=caption)

    except Exception as e:
        logger.error("Photo processing failed", extra={"error": str(e)})
        bot.reply_to(m, f"‡πÇ‡∏≠‡πä‡∏∞ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: <code>{e}</code> ‡∏Ñ‡πà‡∏∞")

#* ------------ /weather ------------
@bot.message_handler(commands=["weather"])
def handle_weather(m):
    logger.info("Weather command received")
    try:
        bot.send_message(m.chat.id, "<b>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</b>")
        weather = llm_weather("Bangkok")
        logger.info("Weather requested", extra={"weather": weather})
        bot.send_message(m.chat.id, f"<b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®</b>\n{weather}")
    except Exception as e:
        bot.reply_to(m, f"‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: <code>{e}</code> ‡∏Ñ‡πà‡∏∞")

def run_bot():
    logger.info("Bot is running")
    bot.infinity_polling(skip_pending=True, allowed_updates=["message"])
